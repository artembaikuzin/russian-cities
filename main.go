package main

import (
	"flag"
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/gocolly/colly/v2"
)

type City struct {
	Name   string
	Region string
	Lat    float64
	Lon    float64
}

func main() {
	start := time.Now()

	var fixRegions = flag.Bool("fix-regions", false, "Tatarstan -> Republic of Tatarstan, and no federal cities")
	flag.Parse()

	fmt.Fprintln(os.Stderr, "üåè Scraping...")

	defer func() {
		fmt.Fprintln(os.Stderr, "Took", time.Since(start))
	}()

	baseUrl := "https://ru.wikipedia.org"
	url := "https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%B3%D0%BE%D1%80%D0%BE%D0%B4%D0%BE%D0%B2_%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D0%B8"
	cities := 0

	c := colly.NewCollector()

	c.OnHTML("table tbody tr", func(e *colly.HTMLElement) {
		if len(e.DOM.Children().Nodes) != 9 {
			return
		}

		city := City{}

		e.ForEach("td", func(i int, h *colly.HTMLElement) {
			switch i {
			case 2:
				h.ForEach("a:first-child", func(i int, h *colly.HTMLElement) {
					if i > 0 {
						return
					}

					city.Name = h.Text
					cityPage := h.Attr("href")

					d := c.Clone()

					d.OnHTML("span.coordinates a.mw-kartographer-maplink", func(h *colly.HTMLElement) {
						if city.Lat > 0.0 {
							return
						}

						lat, err := strconv.ParseFloat(h.Attr("data-lat"), 64)

						if err != nil {
							fmt.Fprintf(os.Stderr, "Can't parse lat for %q, %v\n", city.Name, err)
							return
						}

						lon, err := strconv.ParseFloat(h.Attr("data-lon"), 64)

						if err != nil {
							fmt.Fprintf(os.Stderr, "Can't parse lon for %q, %v\n", city.Name, err)
							return
						}

						city.Lat = lat
						city.Lon = lon
					})

					d.Visit(baseUrl + cityPage)
				})
			case 3:
				if *fixRegions {
					city.Region = fixRegion(h.Text)
				} else {
					city.Region = h.Text
				}

				cities += 1

				fmt.Printf("%s,%s,%f,%f\n", city.Name, city.Region, city.Lat, city.Lon)
			}
		})
	})

	c.Visit(url)

	fmt.Fprintln(os.Stderr, "Total cities", cities)
}

func fixRegion(region string) string {
	translate := map[string]string{
		"–ú–æ—Å–∫–≤–∞":          "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
		"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
		"–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å":     "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º",

		"–ê–¥—ã–≥–µ—è":             "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è",
		"–ê–ª—Ç–∞–π":              "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–ª—Ç–∞–π",
		"–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω":       "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω",
		"–ë—É—Ä—è—Ç–∏—è":            "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è",
		"–î–∞–≥–µ—Å—Ç–∞–Ω":           "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω",
		"–ò–Ω–≥—É—à–µ—Ç–∏—è":          "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω–≥—É—à–µ—Ç–∏—è",
		"–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è": "–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
		"–ö–∞–ª–º—ã–∫–∏—è":           "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è",
		"–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å–∏—è": "–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
		"–ö–∞—Ä–µ–ª–∏—è":            "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è",
		"–ö–æ–º–∏":               "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–º–∏",
		"–ö—Ä—ã–º":               "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º",
		"–ú–∞—Ä–∏–π –≠–ª":           "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª",
		"–ú–æ—Ä–¥–æ–≤–∏—è":           "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è",
		"–°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è":    "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è‚Äì–ê–ª–∞–Ω–∏—è",
		"–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω":          "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω",
		"–¢—ã–≤–∞":               "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢—ã–≤–∞",
		"–£–¥–º—É—Ä—Ç–∏—è":           "–£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
		"–•–∞–∫–∞—Å–∏—è":            "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –•–∞–∫–∞—Å–∏—è",
		"–ß–µ—á–Ω—è":              "–ß–µ—á–µ–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
		"–ß—É–≤–∞—à–∏—è":            "–ß—É–≤–∞—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
		"–Ø–∫—É—Ç–∏—è":             "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–∞—Ö–∞",
	}

	t, ok := translate[region]

	if !ok {
		return region
	}

	return t
}
